generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  email                    String    @unique
  name                     String?
  password                 String?
  image                    String?
  emailVerified            DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  initials                 String?
  isVerified               Boolean   @default(false)
  sub                      String?   @unique
  username                 String?   @unique
  passwordResetToken       String?   @unique
  passwordResetTokenExpiry DateTime?
  verificationToken        String?   @unique
  verificationTokenExpiry  DateTime?
  accounts                 Account[]
  resumes                  Resume[]
  sessions                 Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Resume {
  id           String          @id @default(cuid())
  userId       String
  title        String
  templateId   String          @default("modern")
  styleConfig  Json            @default("{}")
  isPublic     Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lastEditedAt DateTime        @default(now())
  versions     ResumeVersion[]
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections     Section[]
  shareLinks   ShareLink[]

  @@index([userId])
  @@index([templateId])
  @@index([updatedAt])
  @@map("resumes")
}

model ResumeVersion {
  id        String   @id @default(cuid())
  resumeId  String
  data      Json
  version   Int
  action    String?
  createdAt DateTime @default(now())
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId, version])
  @@index([createdAt])
  @@map("resume_versions")
}

model Section {
  id        String      @id @default(cuid())
  resumeId  String
  type      SectionType
  data      Json
  order     Int         @default(0)
  isVisible Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  resume    Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId, order])
  @@index([type])
  @@map("sections")
}

model Template {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  structure   Json
  preview     String?
  category    String   @default("professional")
  isPremium   Boolean  @default(false)
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@map("templates")
}

model ShareLink {
  id           String    @id @default(cuid())
  resumeId     String
  slug         String    @unique
  isActive     Boolean   @default(true)
  password     String?
  expiresAt    DateTime?
  viewCount    Int       @default(0)
  lastViewedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  resume       Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([resumeId])
  @@index([expiresAt])
  @@map("share_links")
}

model StylePreset {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  config      Json
  isDefault   Boolean  @default(false)
  isPublic    Boolean  @default(false)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isDefault])
  @@index([isPublic])
  @@map("style_presets")
}

enum SectionType {
  PERSONAL_INFO
  SUMMARY
  EXPERIENCE
  EDUCATION
  SKILLS
  PROJECTS
  CERTIFICATIONS
  LANGUAGES
  INTERESTS
  CUSTOM
}
